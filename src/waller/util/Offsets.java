package waller.util;

import aic2020.user.Location;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Offsets {
  private Map<Integer, int[][]> ringOffsets = new HashMap<>();
  private Map<Integer, int[][]> rangeOffsets = new HashMap<>();

  public Offsets() {
    ringOffsets.put(
        1, new int[][] {{-1, 1}, {0, 1}, {1, 1}, {1, 0}, {1, -1}, {0, -1}, {-1, -1}, {-1, 0}});

    ringOffsets.put(
        2,
        new int[][] {
          {-2, 2}, {-1, 2}, {0, 2}, {1, 2}, {2, 2}, {2, 1}, {2, 0}, {2, -1}, {2, -2}, {1, -2},
          {0, -2}, {-1, -2}, {-2, -2}, {-2, -1}, {-2, 0}, {-2, 1}
        });

    ringOffsets.put(
        3,
        new int[][] {
          {-3, 3}, {-2, 3}, {-1, 3}, {0, 3}, {1, 3}, {2, 3}, {3, 3}, {3, 2}, {3, 1}, {3, 0},
          {3, -1}, {3, -2}, {3, -3}, {2, -3}, {1, -3}, {0, -3}, {-1, -3}, {-2, -3}, {-3, -3},
          {-3, -2}, {-3, -1}, {-3, 0}, {-3, 1}, {-3, 2}
        });

    ringOffsets.put(
        4,
        new int[][] {
          {-4, 4}, {-3, 4}, {-2, 4}, {-1, 4}, {0, 4}, {1, 4}, {2, 4}, {3, 4}, {4, 4}, {4, 3},
          {4, 2}, {4, 1}, {4, 0}, {4, -1}, {4, -2}, {4, -3}, {4, -4}, {3, -4}, {2, -4}, {1, -4},
          {0, -4}, {-1, -4}, {-2, -4}, {-3, -4}, {-4, -4}, {-4, -3}, {-4, -2}, {-4, -1}, {-4, 0},
          {-4, 1}, {-4, 2}, {-4, 3}
        });

    ringOffsets.put(
        5,
        new int[][] {
          {-5, 5}, {-4, 5}, {-3, 5}, {-2, 5}, {-1, 5}, {0, 5}, {1, 5}, {2, 5}, {3, 5}, {4, 5},
          {5, 5}, {5, 4}, {5, 3}, {5, 2}, {5, 1}, {5, 0}, {5, -1}, {5, -2}, {5, -3}, {5, -4},
          {5, -5}, {4, -5}, {3, -5}, {2, -5}, {1, -5}, {0, -5}, {-1, -5}, {-2, -5}, {-3, -5},
          {-4, -5}, {-5, -5}, {-5, -4}, {-5, -3}, {-5, -2}, {-5, -1}, {-5, 0}, {-5, 1}, {-5, 2},
          {-5, 3}, {-5, 4}
        });

    rangeOffsets.put(
        5,
        new int[][] {
          {0, -1}, {-1, 0}, {1, 0}, {0, 1}, {-1, -1}, {1, -1}, {-1, 1}, {1, 1}, {0, -2}, {-2, 0},
          {2, 0}, {0, 2}, {-1, -2}, {1, -2}, {-2, -1}, {2, -1}, {-2, 1}, {2, 1}, {-1, 2}, {1, 2}
        });

    rangeOffsets.put(
        13,
        new int[][] {
          {0, -1}, {-1, 0}, {1, 0}, {0, 1}, {-1, -1}, {1, -1}, {-1, 1}, {1, 1}, {0, -2}, {-2, 0},
          {2, 0}, {0, 2}, {-1, -2}, {1, -2}, {-2, -1}, {2, -1}, {-2, 1}, {2, 1}, {-1, 2}, {1, 2},
          {-2, -2}, {2, -2}, {-2, 2}, {2, 2}, {0, -3}, {-3, 0}, {3, 0}, {0, 3}, {-1, -3}, {1, -3},
          {-3, -1}, {3, -1}, {-3, 1}, {3, 1}, {-1, 3}, {1, 3}, {-2, -3}, {2, -3}, {-3, -2}, {3, -2},
          {-3, 2}, {3, 2}, {-2, 3}, {2, 3}
        });

    rangeOffsets.put(
        25,
        new int[][] {
          {0, -1}, {-1, 0}, {1, 0}, {0, 1}, {-1, -1}, {1, -1}, {-1, 1}, {1, 1}, {0, -2}, {-2, 0},
          {2, 0}, {0, 2}, {-1, -2}, {1, -2}, {-2, -1}, {2, -1}, {-2, 1}, {2, 1}, {-1, 2}, {1, 2},
          {-2, -2}, {2, -2}, {-2, 2}, {2, 2}, {0, -3}, {-3, 0}, {3, 0}, {0, 3}, {-1, -3}, {1, -3},
          {-3, -1}, {3, -1}, {-3, 1}, {3, 1}, {-1, 3}, {1, 3}, {-2, -3}, {2, -3}, {-3, -2}, {3, -2},
          {-3, 2}, {3, 2}, {-2, 3}, {2, 3}, {0, -4}, {-4, 0}, {4, 0}, {0, 4}, {-1, -4}, {1, -4},
          {-4, -1}, {4, -1}, {-4, 1}, {4, 1}, {-1, 4}, {1, 4}, {-3, -3}, {3, -3}, {-3, 3}, {3, 3},
          {-2, -4}, {2, -4}, {-4, -2}, {4, -2}, {-4, 2}, {4, 2}, {-2, 4}, {2, 4}, {0, -5}, {-3, -4},
          {3, -4}, {-4, -3}, {4, -3}, {-5, 0}, {5, 0}, {-4, 3}, {4, 3}, {-3, 4}, {3, 4}, {0, 5}
        });

    rangeOffsets.put(
        30,
        new int[][] {
          {0, -1}, {-1, 0}, {1, 0}, {0, 1}, {-1, -1}, {1, -1}, {-1, 1}, {1, 1}, {0, -2}, {-2, 0},
          {2, 0}, {0, 2}, {-1, -2}, {1, -2}, {-2, -1}, {2, -1}, {-2, 1}, {2, 1}, {-1, 2}, {1, 2},
          {-2, -2}, {2, -2}, {-2, 2}, {2, 2}, {0, -3}, {-3, 0}, {3, 0}, {0, 3}, {-1, -3}, {1, -3},
          {-3, -1}, {3, -1}, {-3, 1}, {3, 1}, {-1, 3}, {1, 3}, {-2, -3}, {2, -3}, {-3, -2}, {3, -2},
          {-3, 2}, {3, 2}, {-2, 3}, {2, 3}, {0, -4}, {-4, 0}, {4, 0}, {0, 4}, {-1, -4}, {1, -4},
          {-4, -1}, {4, -1}, {-4, 1}, {4, 1}, {-1, 4}, {1, 4}, {-3, -3}, {3, -3}, {-3, 3}, {3, 3},
          {-2, -4}, {2, -4}, {-4, -2}, {4, -2}, {-4, 2}, {4, 2}, {-2, 4}, {2, 4}, {0, -5}, {-3, -4},
          {3, -4}, {-4, -3}, {4, -3}, {-5, 0}, {5, 0}, {-4, 3}, {4, 3}, {-3, 4}, {3, 4}, {0, 5},
          {-1, -5}, {1, -5}, {-5, -1}, {5, -1}, {-5, 1}, {5, 1}, {-1, 5}, {1, 5}, {-2, -5}, {2, -5},
          {-5, -2}, {5, -2}, {-5, 2}, {5, 2}, {-2, 5}, {2, 5}
        });

    rangeOffsets.put(
        42,
        new int[][] {
          {0, -1}, {-1, 0}, {1, 0}, {0, 1}, {-1, -1}, {1, -1}, {-1, 1}, {1, 1}, {0, -2}, {-2, 0},
          {2, 0}, {0, 2}, {-1, -2}, {1, -2}, {-2, -1}, {2, -1}, {-2, 1}, {2, 1}, {-1, 2}, {1, 2},
          {-2, -2}, {2, -2}, {-2, 2}, {2, 2}, {0, -3}, {-3, 0}, {3, 0}, {0, 3}, {-1, -3}, {1, -3},
          {-3, -1}, {3, -1}, {-3, 1}, {3, 1}, {-1, 3}, {1, 3}, {-2, -3}, {2, -3}, {-3, -2}, {3, -2},
          {-3, 2}, {3, 2}, {-2, 3}, {2, 3}, {0, -4}, {-4, 0}, {4, 0}, {0, 4}, {-1, -4}, {1, -4},
          {-4, -1}, {4, -1}, {-4, 1}, {4, 1}, {-1, 4}, {1, 4}, {-3, -3}, {3, -3}, {-3, 3}, {3, 3},
          {-2, -4}, {2, -4}, {-4, -2}, {4, -2}, {-4, 2}, {4, 2}, {-2, 4}, {2, 4}, {0, -5}, {-3, -4},
          {3, -4}, {-4, -3}, {4, -3}, {-5, 0}, {5, 0}, {-4, 3}, {4, 3}, {-3, 4}, {3, 4}, {0, 5},
          {-1, -5}, {1, -5}, {-5, -1}, {5, -1}, {-5, 1}, {5, 1}, {-1, 5}, {1, 5}, {-2, -5}, {2, -5},
          {-5, -2}, {5, -2}, {-5, 2}, {5, 2}, {-2, 5}, {2, 5}, {-4, -4}, {4, -4}, {-4, 4}, {4, 4},
          {-3, -5}, {3, -5}, {-5, -3}, {5, -3}, {-5, 3}, {5, 3}, {-3, 5}, {3, 5}, {0, -6}, {-6, 0},
          {6, 0}, {0, 6}, {-1, -6}, {1, -6}, {-6, -1}, {6, -1}, {-6, 1}, {6, 1}, {-1, 6}, {1, 6},
          {-2, -6}, {2, -6}, {-6, -2}, {6, -2}, {-6, 2}, {6, 2}, {-2, 6}, {2, 6}, {-4, -5}, {4, -5},
          {-5, -4}, {5, -4}, {-5, 4}, {5, 4}, {-4, 5}, {4, 5}
        });

    rangeOffsets.put(
        64,
        new int[][] {
          {0, -1}, {-1, 0}, {1, 0}, {0, 1}, {-1, -1}, {1, -1}, {-1, 1}, {1, 1}, {0, -2}, {-2, 0},
          {2, 0}, {0, 2}, {-1, -2}, {1, -2}, {-2, -1}, {2, -1}, {-2, 1}, {2, 1}, {-1, 2}, {1, 2},
          {-2, -2}, {2, -2}, {-2, 2}, {2, 2}, {0, -3}, {-3, 0}, {3, 0}, {0, 3}, {-1, -3}, {1, -3},
          {-3, -1}, {3, -1}, {-3, 1}, {3, 1}, {-1, 3}, {1, 3}, {-2, -3}, {2, -3}, {-3, -2}, {3, -2},
          {-3, 2}, {3, 2}, {-2, 3}, {2, 3}, {0, -4}, {-4, 0}, {4, 0}, {0, 4}, {-1, -4}, {1, -4},
          {-4, -1}, {4, -1}, {-4, 1}, {4, 1}, {-1, 4}, {1, 4}, {-3, -3}, {3, -3}, {-3, 3}, {3, 3},
          {-2, -4}, {2, -4}, {-4, -2}, {4, -2}, {-4, 2}, {4, 2}, {-2, 4}, {2, 4}, {0, -5}, {-3, -4},
          {3, -4}, {-4, -3}, {4, -3}, {-5, 0}, {5, 0}, {-4, 3}, {4, 3}, {-3, 4}, {3, 4}, {0, 5},
          {-1, -5}, {1, -5}, {-5, -1}, {5, -1}, {-5, 1}, {5, 1}, {-1, 5}, {1, 5}, {-2, -5}, {2, -5},
          {-5, -2}, {5, -2}, {-5, 2}, {5, 2}, {-2, 5}, {2, 5}, {-4, -4}, {4, -4}, {-4, 4}, {4, 4},
          {-3, -5}, {3, -5}, {-5, -3}, {5, -3}, {-5, 3}, {5, 3}, {-3, 5}, {3, 5}, {0, -6}, {-6, 0},
          {6, 0}, {0, 6}, {-1, -6}, {1, -6}, {-6, -1}, {6, -1}, {-6, 1}, {6, 1}, {-1, 6}, {1, 6},
          {-2, -6}, {2, -6}, {-6, -2}, {6, -2}, {-6, 2}, {6, 2}, {-2, 6}, {2, 6}, {-4, -5}, {4, -5},
          {-5, -4}, {5, -4}, {-5, 4}, {5, 4}, {-4, 5}, {4, 5}, {-3, -6}, {3, -6}, {-6, -3}, {6, -3},
          {-6, 3}, {6, 3}, {-3, 6}, {3, 6}, {0, -7}, {-7, 0}, {7, 0}, {0, 7}, {-1, -7}, {1, -7},
          {-5, -5}, {5, -5}, {-7, -1}, {7, -1}, {-7, 1}, {7, 1}, {-5, 5}, {5, 5}, {-1, 7}, {1, 7},
          {-4, -6}, {4, -6}, {-6, -4}, {6, -4}, {-6, 4}, {6, 4}, {-4, 6}, {4, 6}, {-2, -7}, {2, -7},
          {-7, -2}, {7, -2}, {-7, 2}, {7, 2}, {-2, 7}, {2, 7}, {-3, -7}, {3, -7}, {-7, -3}, {7, -3},
          {-7, 3}, {7, 3}, {-3, 7}, {3, 7}, {-5, -6}, {5, -6}, {-6, -5}, {6, -5}, {-6, 5}, {6, 5},
          {-5, 6}, {5, 6}, {0, -8}, {-8, 0}, {8, 0}, {0, 8}
        });
  }

  public int[][] getRingOffsets(int ring) {
    if (!ringOffsets.containsKey(ring)) {
      int boxWidth = 2 * ring + 1;
      int offsetCount = boxWidth * 2 + (boxWidth - 2) * 2;

      int[][] offsets = new int[offsetCount][2];

      int x = -ring;
      int y = ring;

      int dx = 1;
      int dy = 0;

      for (int i = 0; i < offsetCount; i++) {
        offsets[i] = new int[] {x, y};

        x += dx;
        y += dy;

        if (x == i && y == i) {
          dx = 0;
          dy = -1;
        } else if (x == i && y == -i) {
          dx = -1;
          dy = 0;
        } else if (x == -i && y == -i) {
          dx = 0;
          dy = 1;
        }
      }

      ringOffsets.put(ring, offsets);
    }

    return ringOffsets.get(ring);
  }

  public int[][] getRangeOffsets(int range) {
    if (!rangeOffsets.containsKey(range)) {
      Location root = new Location(0, 0);
      List<Location> locationsInRange = new ArrayList<>(range);

      int maxOffset = (int) Math.ceil(Math.sqrt(range));

      for (int y = -maxOffset; y <= maxOffset; y++) {
        for (int x = -maxOffset; x <= maxOffset; x++) {
          if (x == 0 && y == 0) {
            continue;
          }

          Location location = new Location(x, y);
          if (location.distanceSquared(root) <= range) {
            locationsInRange.add(location);
          }
        }
      }

      locationsInRange.sort(Comparator.comparingInt(location -> location.distanceSquared(root)));

      int[][] offsets = new int[locationsInRange.size()][2];
      for (int i = 0; i < offsets.length; i++) {
        Location location = locationsInRange.get(i);
        offsets[i] = new int[] {location.x, location.y};
      }

      rangeOffsets.put(range, offsets);
    }

    return rangeOffsets.get(range);
  }
}
